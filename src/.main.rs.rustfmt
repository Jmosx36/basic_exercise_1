// Pendientes:
// 1) Agregar la tolerancia a fallas (Terminado)
// 2) Dividir los múltiples if en subfunciones (Terminado)
// 3) Hacer posible expandir la lista de clientes solo agregándolos a la función creadora para que no esté sujeto a 30
// 4) Creo que la siguiente fase será imprimir la información en una tabla mas organizada y estética
// 4.1) Creo que el camino a tomar debe ser la librería stanza, le voy a dar el intento (SIP, ES EL CAMINO)
// 4.2) En el main no va la librería, solamente en los módulos de impresión de clientes
// 4.3) Creo que voy a hacer un mpodulo general para imprimir tablas y le envío los parámetros correspondientes TERMINADO


mod opciones; // Ingresa al archivo opciones.rs y busca los módulos que ahí estén especificados
// Hay una carpeta opciones donde están todos los archivos con las funciones de las opciones
// por lo que debe haber un archivo igualmente llamado como la carpeta para poder acceder a ella

use opciones::clientes_lista::{Clientes, crear_lista_clientes};  // Importa la estructura Clientes, la cual ahora pertenece a main y puede ser llamada de aquí desde otro archivo
use opciones::consultar_saldo::consultar_saldo; // Por ser el main, se puede usar un path relativo
use opciones::depositar_saldo::depositar_saldo;
use opciones::eliminar_cliente::eliminar_cliente;
use opciones::filtrar_saldo::filtrar_saldo;
use opciones::imprimir_opciones::imprimir_opciones;
use opciones::ingresar_cliente::ingresar_cliente;
use opciones::listar_clientes::listar_clientes;
use opciones::modificar_cliente::modificar_cliente;
use opciones::retirar_saldo::retirar_saldo;
use opciones::saldo::saldo;
use opciones::comandos_consola::limpiar_consola;
use std::io;  // Usar entrada de datos en consola


fn main() {
    let mut lista: [Clientes; 30] = crear_lista_clientes();

    limpiar_consola();


    loop {

        imprimir_opciones();  // Imprime en consola la lista de opciones


        println!("Por favor, digite un número de la opción\n");

        let mut valor = String::new(); // Declara la variable de la opción de consola

        io::stdin()  //  Función para ingresar un dato por consola
            .read_line(&mut valor) // Guarda el dato de consola en la variable
            .expect("Error al leer la línea");

        let valor: u32 = match valor.trim().parse() {  // trim hace que se eliminen espacios y saltos de línea al principio y final del string,
                                                       // parse analiza el contenido de la variable y lo convierte al tipo de dato de la declaración de la variable al principio de la línea

            Ok(num) => num,    // El parse es un enum, y puede regresar Ok o Err, el match se utiliza para crear una acción si se presenta cualquiera de ambos resultados
            Err(_) => {
                limpiar_consola();
                println!("Debe ingresar un número");
                continue;
            },   // El _ significa que acepte cualquier argumento que pueda llegar dentro del paréntesis
        };

        match valor { // En vez de hacer una larga comparación con if, se hace un match, pero no
                      // estoy seguri si esto reduce, asi sea un poco, el uso de cpu, no se si es
                      // una comparación mas rápida, pero creo que si

            // Opción 1
            1 => listar_clientes(&lista),

            // Opción 2
            2 => ingresar_cliente(&mut lista),

            // Opción 3
            3 => modificar_cliente(&mut lista),

            // Opción 4
            4 => eliminar_cliente(&mut lista),

            // Opción 5
            5 => {
                println!("");
                println!("Escoja una opción");
                println!("1) Saldo de los hombres");
                println!("2) Saldo de las mujeres");
                println!("");
                let mut opcion_saldo = String::new(); // Declara la variable de la opción de consola

                io::stdin()  //  Función para ingresar un dato por consola
                    .read_line(&mut opcion_saldo) // Guarda el dato de consola en la variable
                    .expect("Error al leer la línea");

                let opcion_saldo: u32 = match opcion_saldo.trim().parse() {  // trim hace que se eliminen espacios y saltos de línea al principio y final del string, parse analiza
                                                                             // el contenido de la variable y lo convierte al tipo de dato de la declaración de la variable al principio de la línea
                    Ok(num) => num,    // El parse es un enum, y puede regresar Ok o Err, el match se utiliza para crear una acción si se presenta cualquiera de ambos resultados
                    Err(_) => 0,   // El _ significa que acepte cualquier argumento que pueda llegar dentro del paréntesis
                };

                if opcion_saldo == 1 {
                    saldo(&lista, 1);
                }else if opcion_saldo == 2 {
                    saldo(&lista, 2);
                }else {
                    limpiar_consola();
                    println!("Debe escoger una opción correcta");
                }

                },

            // Opción 6
            6 => filtrar_saldo(&lista),

            // Opción 7
            7 => depositar_saldo(&mut lista),

            // Opción 8
            8 => retirar_saldo(&mut lista),

            // Opción 9
            9 => consultar_saldo(&lista),

            // Opción 10
            10 => {
                println!("\nMuchas gracias, vuelva pronto");
                println!("Programa hecho por Jmosx36\n");
                break;
            },

            // Opción ninguna de las anteriores
            _ => { // Parece que si fue una buena idea cambiar a un match, debo tenerlo mas presente para el futuro
                println!("");
                println!("Debe digitar una opción correcta");
                println!("");

            },
        };
    }
}
